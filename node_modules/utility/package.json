{
  "_from": "utility",
  "_id": "utility@1.13.1",
  "_inBundle": false,
  "_integrity": "sha512-OQYqjyhHSCeSm+IziPHNbLc+WR3jUNa3goeyLoiITV1saN/BesDDsUIvh1LTRXa3XO2UpobByW//mm5p62/9tQ==",
  "_location": "/utility",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "utility",
    "fetchSpec": "latest",
    "name": "utility",
    "raw": "utility",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/utility/-/utility-1.13.1.tgz",
  "_shasum": "9d72e145e49e4c5a21f2c307b0baf575235023f4",
  "_spec": "utility",
  "_where": "E:\\nodeWeb",
  "author": {
    "email": "fengmk2@gmail.com",
    "name": "fengmk2",
    "url": "http://fengmk2.com"
  },
  "bugs": {
    "url": "https://github.com/node-modules/utility/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "copy-to": "~2.0.1",
    "escape-html": "~1.0.3",
    "mkdirp": "~0.5.1",
    "mz": "~2.7.0"
  },
  "deprecated": false,
  "description": "A collection of useful utilities.",
  "devDependencies": {
    "autod": "*",
    "ava": "~0.22.0",
    "beautify-benchmark": "*",
    "benchmark": "^2.1.0",
    "contributors": "*",
    "jshint": "*",
    "moment": "~2.19.1",
    "nyc": "6",
    "object-assign": "^4.1.1",
    "optimized": "~1.2.0",
    "rimraf": "~2.6.2"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/node-modules/utility",
  "keywords": [
    "utility",
    "util",
    "utils",
    "sha256",
    "sha1",
    "hash",
    "hex"
  ],
  "license": "MIT",
  "main": "lib/utility.js",
  "name": "utility",
  "optionalDependencies": {},
  "readme": "# utility\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![build status][travis-image]][travis-url]\r\n[![Test coverage][codecov-image]][codecov-url]\r\n[![npm download][download-image]][download-url]\r\n[![Dependency Status][dependency-image]][dependency-url]\r\n[![devDependency Status][devDependency-image]][devDependency-url]\r\n\r\n[npm-image]: https://img.shields.io/npm/v/utility.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/utility\r\n[travis-image]: https://img.shields.io/travis/node-modules/utility.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/node-modules/utility\r\n[codecov-image]: https://codecov.io/github/node-modules/utility/coverage.svg?branch=master\r\n[codecov-url]: https://codecov.io/github/node-modules/utility?branch=master\r\n[download-image]: https://img.shields.io/npm/dm/utility.svg?style=flat-square\r\n[download-url]: https://npmjs.org/package/utility\r\n[dependency-image]: https://david-dm.org/node-modules/utility.svg\r\n[dependency-url]: https://david-dm.org/node-modules/utility\r\n[devDependency-image]: https://david-dm.org/node-modules/utility/dev-status.svg\r\n[devDependency-url]: https://david-dm.org/node-modules/utility#info=devDependencies\r\n\r\nA collection of useful utilities.\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install utility\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nconst utils = require('utility');\r\n```\r\n\r\n### md5\r\n\r\n```js\r\nutils.md5('苏千').should.equal('5f733c47c58a077d61257102b2d44481');\r\nutils.md5(new Buffer('苏千')).should.equal('5f733c47c58a077d61257102b2d44481');\r\n// md5 base64 format\r\nutils.md5('苏千', 'base64'); // 'X3M8R8WKB31hJXECstREgQ=='\r\n\r\n// Object md5 hash. Sorted by key, and JSON.stringify. See source code for detail\r\nutils.md5({foo: 'bar', bar: 'foo'}).should.equal(utils.md5({bar: 'foo', foo: 'bar'}));\r\n```\r\n\r\n### sha1\r\n\r\n```js\r\nutils.sha1('苏千').should.equal('0a4aff6bab634b9c2f99b71f25e976921fcde5a5');\r\nutils.sha1(new Buffer('苏千')).should.equal('0a4aff6bab634b9c2f99b71f25e976921fcde5a5');\r\n// sha1 base64 format\r\nutils.sha1('苏千', 'base64'); // 'Ckr/a6tjS5wvmbcfJel2kh/N5aU='\r\n\r\n// Object sha1 hash. Sorted by key, and JSON.stringify. See source code for detail\r\nutils.sha1({foo: 'bar', bar: 'foo'}).should.equal(utils.sha1({bar: 'foo', foo: 'bar'}));\r\n```\r\n\r\n### sha256\r\n\r\n```js\r\nutils.sha256(new Buffer('苏千')).should.equal('75dd03e3fcdbba7d5bec07900bae740cc8e361d77e7df8949de421d3df5d3635');\r\n```\r\n\r\n### hmac\r\n\r\n```js\r\n// hmac-sha1 with base64 output encoding\r\nutils.hmac('sha1', 'I am a key', 'hello world'); // 'pO6J0LKDxRRkvSECSEdxwKx84L0='\r\n```\r\n\r\n### decode and encode\r\n\r\n```js\r\n// base64 encode\r\nutils.base64encode('你好￥'); // '5L2g5aW977+l'\r\nutils.base64decode('5L2g5aW977+l') // '你好￥'\r\n\r\n// urlsafe base64 encode\r\nutils.base64encode('你好￥', true); // '5L2g5aW977-l'\r\nutils.base64decode('5L2g5aW977-l', true); // '你好￥'\r\n\r\n// html escape\r\nutils.escape('<script/>\"& &amp;'); // '&lt;script/&gt;&quot;&amp; &amp;'\r\n\r\n// Safe encodeURIComponent and decodeURIComponent\r\nutils.decodeURIComponent(utils.encodeURIComponent('你好, nodejs')).should.equal('你好, nodejs');\r\n```\r\n\r\n### others\r\n\r\n___[WARNNING] getIP() remove, PLEASE use `https://github.com/node-modules/address` module instead.___\r\n\r\n```js\r\n// get a function parameter's names\r\nutils.getParamNames(function (key1, key2) {}); // ['key1', 'key2']\r\n\r\n// get a random string, default length is 16.\r\nutils.randomString(32, '1234567890'); //18774480824014856763726145106142\r\n\r\n// check if object has this property\r\nutils.has({hello: 'world'}, 'hello'); //true\r\n\r\n// empty function\r\nutils.noop = function () {}\r\n}\r\n```\r\n\r\n### Date utils\r\n\r\n```js\r\n// accessLogDate\r\nutils.accessLogDate(); // '16/Apr/2013:16:40:09 +0800'\r\n\r\n// logDate,\r\n// 'YYYY-MM-DD HH:mm:ss.SSS' format date string\r\nutils.logDate(); // '2013-04-17 14:43:02.674'\r\nutils.YYYYMMDDHHmmssSSS(); // '2013-04-17 14:43:02.674'\r\nutils.YYYYMMDDHHmmssSSS(','); // '2013-04-17 14:43:02,674'\r\n\r\n// 'YYYY-MM-DD HH:mm:ss' format date string\r\nutils.YYYYMMDDHHmmss(); // '2013-04-17 14:43:02'\r\nutils.YYYYMMDDHHmmss(new Date(), {dateSep: '.'}); // '2013.04.17 14:43:02'\r\n\r\n// 'YYYY-MM-DD' format date string\r\nutils.YYYYMMDD(); // '2013-04-17'\r\nutils.YYYYMMDD(''); // '20130417'\r\nutils.YYYYMMDD(','); // '2013,04,17'\r\n\r\n// datestruct\r\nutils.datestruct(); // { YYYYMMDD: 20130416, H: 8 }\r\n\r\n// Unix's timestamp\r\nutils.timestamp(); // 1378153226\r\n\r\n// Parse timestamp\r\n// seconds\r\nutils.timestamp(1385091596); // Fri Nov 22 2013 11:39:56 GMT+0800 (CST)\r\n// millseconds\r\nutils.timestamp(1385091596000); // Fri Nov 22 2013 11:39:56 GMT+0800 (CST)\r\n```\r\n\r\n### Number utils\r\n\r\n```js\r\n// Detect a number string can safe convert to Javascript Number.: `-9007199254740991 ~ 9007199254740991`\r\nutils.isSafeNumberString('9007199254740991'); // true\r\nutils.isSafeNumberString('9007199254740993'); // false\r\n\r\n// Convert string to number safe:\r\nutils.toSafeNumber('9007199254740991'); // 9007199254740991\r\nutils.toSafeNumber('9007199254740993'); // '9007199254740993'\r\n\r\n// Produces a random integer between the inclusive `lower` and exclusive `upper` bounds.\r\nutils.random(100); // [0, 100)\r\nutils.random(2, 1000); // [2, 1000)\r\nutils.random(); // 0\r\n```\r\n\r\n### Timers\r\n\r\n```js\r\nutils.setImmediate(function () {\r\n  console.log('hi');\r\n});\r\n```\r\n\r\n### map\r\n\r\nCreate a `real` map in javascript.\r\n\r\nuse `Object.create(null)`\r\n\r\n```js\r\nconst map = utils.map({a: 1});\r\n\r\n// should.not.exist(map.constractor);\r\n// should.not.exist(map.__proto__);\r\n// should.not.exist(map.toString);\r\n// should not exist any property\r\n\r\nconsole.log(map); // {a: 1}\r\n```\r\n\r\n### String utils\r\n\r\n```js\r\n// split string by sep\r\nutils.split('foo,bar,,,', ','); // ['foo', 'bar']\r\n\r\n// replace string work with special chars which `String.prototype.replace` can't handle\r\nutils.replace('<body> hi', '<body>', '$& body'); // '$& body hi'\r\n\r\n// replace http header invalid characters\r\nutils.replaceInvalidHttpHeaderChar('abc你好11'); // {invalid: true, val: 'abc  11'}\r\n```\r\n\r\n### Try\r\n\r\n```js\r\nconst res = utils.try(function () {\r\n  return JSON.parse(str);\r\n});\r\n\r\n// {error: undefined, value: {foo: 'bar'}}\r\n// {error: Error, value: undefined}\r\n```\r\n\r\n### argumentsToArray\r\n\r\n```js\r\nfunction() {\r\n  const arr = utility.argumentsToArray(arguments);\r\n  console.log(arr.join(', '));\r\n}\r\n```\r\n\r\n### JSON\r\n\r\n```js\r\nconst obj = utils.strictJSONparse('\"hello\"');\r\n// will throw when JSON string is not object\r\n\r\nconst pkg = utils.readJSONSync('package.json');\r\nutils.writeJSONSync('package.json', pkg);\r\n```\r\n\r\nOr you can use async API\r\n\r\n```js\r\nasync () => {\r\n  const pkg = await utils.readJSON('package.json');\r\n  await utils.writeJSON('package.json', pkg);\r\n}\r\n```\r\n\r\n### Object.assign\r\n\r\n\r\n```js\r\n// assign object\r\nutility.assign({}, { a: 1 });\r\n\r\n// assign multiple object\r\nutility.assign({}, [ { a: 1 }, { b: 1 } ]);\r\n```\r\n\r\n## benchmark\r\n\r\n* [jsperf: access log date format](http://jsperf.com/access-log-date-format)\r\n* [benchmark/date_format.js](https://github.com/fengmk2/utility/blob/master/benchmark/date_format.js)\r\n\r\n```bash\r\n$ node benchmark/date_format.js\r\n\r\nmoment().format(\"DD/MMM/YYYY:HH:mm:ss ZZ\"): \"16/Apr/2013:21:12:32 +0800\"\r\nutils.accessLogDate(): \"16/Apr/2013:21:12:32 +0800\"\r\nfasterAccessDate(): \"16/Apr/2013:21:12:32 +0800\"\r\nfasterAccessDate2(): \"16/Apr/2013:21:12:32 +0800\"\r\nnew Date().toString(): \"Tue Apr 16 2013 21:12:32 GMT+0800 (CST)\"\r\nDate(): \"Tue Apr 16 2013 21:12:32 GMT+0800 (CST)\"\r\nDate.now(): 1366117952162\r\n------------------------\r\nmoment().format('DD/MMM/YYYY:HH:mm:ss ZZ') x 68,300 ops/sec ±5.05% (91 runs sampled)\r\nutils.accessLogDate() x 1,341,341 ops/sec ±2.72% (90 runs sampled)\r\nfasterAccessDate() x 357,833 ops/sec ±1.32% (98 runs sampled)\r\nfasterAccessDate2() x 301,607 ops/sec ±5.03% (83 runs sampled)\r\nnew Date().toString() x 738,499 ops/sec ±3.54% (86 runs sampled)\r\nDate() x 794,724 ops/sec ±2.77% (95 runs sampled)\r\nDate.now() x 8,327,685 ops/sec ±1.85% (94 runs sampled)\r\nFastest is Date.now()\r\n```\r\n\r\n[benchmark/date_YYYYMMDD.js](https://github.com/fengmk2/utility/blob/master/benchmark/date_YYYYMMDD.js)\r\n\r\n```bash\r\n$ node benchmark/date_YYYYMMDD.js\r\n\r\nparseInt(moment().format(\"YYYYMMDD\"), 10): 20130416\r\nutils.datestruct().YYYYMMDD: 20130416\r\nnew Date().toString(): \"Tue Apr 16 2013 21:12:02 GMT+0800 (CST)\"\r\n------------------------\r\nparseInt(moment().format('YYYYMMDD'), 10) x 129,604 ops/sec ±0.46% (101 runs sampled)\r\nutils.datestruct().YYYYMMDD x 2,317,461 ops/sec ±1.38% (95 runs sampled)\r\nnew Date().toString() x 816,731 ops/sec ±3.46% (93 runs sampled)\r\nFastest is utils.datestruct().YYYYMMDD\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE.txt)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-modules/utility.git",
    "web": "https://github.com/node-modules/utility"
  },
  "scripts": {
    "autod": "autod -w --prefix '~' -e benchmark",
    "ci": "npm run lint && npm run test-cov",
    "lint": "jshint .",
    "test": "npm run lint && npm run test-local",
    "test-cov": "nyc ava test/**/*.test.js && nyc report --reporter=lcov",
    "test-local": "ava test/**/*.test.js",
    "test-optimized": "node --allow-natives-syntax --trace_opt --trace_deopt test/optimized.js"
  },
  "version": "1.13.1"
}
